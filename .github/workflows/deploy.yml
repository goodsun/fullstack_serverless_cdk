name: Deploy to AWS

on:
  push:
    branches:
      - develop
      - staging
      - production
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'ap-northeast-1' }}

    - name: Set up environment
      run: |
        echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION || 'ap-northeast-1' }}" >> .env

    - name: CDK Bootstrap (if needed)
      run: |
        npx cdk bootstrap || echo "Bootstrap already exists"

    - name: Deploy to dev (develop branch)
      if: github.ref == 'refs/heads/develop'
      run: npm run deploy:dev -- --require-approval never

    - name: Deploy to staging (staging branch)
      if: github.ref == 'refs/heads/staging'
      run: npm run deploy:staging -- --require-approval never

    - name: Deploy to prod (production branch)
      if: github.ref == 'refs/heads/production'
      run: npm run deploy:prod -- --require-approval never

    - name: Configure frontend with API endpoint
      run: |
        # Get stack name and environment based on branch
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          STACK_NAME="${{ secrets.PROJECT_NAME }}-dev"
          ENV="dev"
          API_ENDPOINT="${{ secrets.API_ENDPOINT_DEV || '' }}"
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          STACK_NAME="${{ secrets.PROJECT_NAME }}-staging"
          ENV="staging"
          API_ENDPOINT="${{ secrets.API_ENDPOINT_STAGING || '' }}"
        elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
          STACK_NAME="${{ secrets.PROJECT_NAME }}-prod"
          ENV="prod"
          API_ENDPOINT="${{ secrets.API_ENDPOINT_PROD || '' }}"
        fi
        
        # Check if stack exists
        if aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ secrets.AWS_REGION || 'ap-northeast-1' }} >/dev/null 2>&1; then
          echo "Stack $STACK_NAME exists"
          
          # If environment-specific API_ENDPOINT is not set in secrets, get it from stack output
          if [ -z "$API_ENDPOINT" ]; then
            API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' --output text --region ${{ secrets.AWS_REGION || 'ap-northeast-1' }} || echo "")
          fi
          
          # Create api-config.js with the API endpoint
          cat > frontend/js/api-config.js << EOF
        // Auto-generated during deployment - DO NOT EDIT
        window.API_CONFIG = {
          apiEndpoint: '$API_ENDPOINT',
          isManaged: true
        };
        EOF
          
          # Get S3 bucket name (without account ID to match CDK stack)
          BUCKET_NAME="${{ secrets.PROJECT_NAME }}-frontend-${ENV}"
          
          # Check if bucket exists before syncing
          if aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "Syncing frontend to S3 bucket: $BUCKET_NAME"
            
            # Upload updated frontend
            aws s3 sync frontend/ s3://$BUCKET_NAME/ --delete
            
            # Invalidate CloudFront cache
            DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' --output text --region ${{ secrets.AWS_REGION || 'ap-northeast-1' }} || echo "")
            if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
              echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
              aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
            fi
          else
            echo "Warning: S3 bucket $BUCKET_NAME not found. Skipping frontend sync."
          fi
        else
          echo "Stack $STACK_NAME does not exist yet. This might be the first deployment."
          echo "Frontend configuration will be handled in the next deployment."
        fi

    - name: Show outputs
      run: |
        echo "Deployment completed!"
        echo "Check AWS CloudFormation console for stack outputs"